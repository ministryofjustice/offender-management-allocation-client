references:
  defaults: &defaults
    working_directory: ~/repo

  ruby_image: &ruby_image
    image: circleci/ruby:2.5.3-node-browsers
    environment:
      RAILS_ENV: test
      RACK_ENV: test

  deploy_container_config: &deploy_container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: offender-management


  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        echo "${CIRCLECI_GPG_USER_PRIVATE_KEY}" | base64 -d | gpg --batch --allow-secret-key-import --import

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: git-crypt unlock

  install_aws_cli: &install_aws_cli
    run:
      name: Set up aws
      command: |
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-1 --no-include-email)

  build_docker_image: &build_docker_image
    run:
      name: Build allocation-manager docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push allocation-manager docker image
      command: |
        login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
        ${login}
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
        fi

version: 2
jobs:
  install_dependencies:
    <<: *defaults
    docker:
      - <<: *ruby_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          keys:
            - allocation-manager-v1-{{ checksum "Gemfile.lock" }}
            - allocation-manager-v1-
      - run:
          name: Which bundler?
          command: bundle -v
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Install GOV.UK frontend modules
          command: npm install
      - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      - save_cache:
          key: allocation-manager-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/repo/vendor/bundle
      - persist_to_workspace:
          root: .
          paths:
            - vendor/bundle
            - node_modules/

  test:
    <<: *defaults
    docker:
      - <<: *ruby_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: bundle --path vendor/bundle
      - run:
          name: Download Code Climate
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run tests
          command: |
            ./cc-test-reporter before-build
            bundle exec rake
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage

  security-static-analysis:
    <<: *defaults
    docker:
      - <<: *ruby_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: bundle --path vendor/bundle
      - run: bundle exec brakeman -o brakeman.html
      - store_artifacts:
          path: brakeman.html

  rubocop:
    <<: *defaults
    docker:
      - <<: *ruby_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run: bundle --path vendor/bundle
      - run: bundle exec rubocop

  build_push_docker:
    <<: *defaults
    docker:
      - <<: *ruby_image
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          docker_layer_caching: true
      - *install_aws_cli
      - *build_docker_image
      - *push_docker_image

  deploy_staging:
    <<: *deploy_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/repo
      - run:
          name: Kubectl deployment staging setup
          command: |
            $(aws ecr get-login --region eu-west-1 --no-include-email)
            setup-kube-auth
            kubectl config use-context staging
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to staging
          command: |
            kubectl set image -f deploy/deployment.yaml allocation-manager=${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} --local -o yaml \
            | kubectl apply -f -
            kubectl apply \
              -f ./deploy/ingress.yaml \
              -f ./deploy/service.yaml \
              -f ./deploy/allocation-manager-secrets.yaml \
              -f ./deploy/deployment.yaml

workflows:
  version: 2
  build_and_test:
    jobs:
      - install_dependencies
      - test:
          requires:
            - install_dependencies
      - security-static-analysis:
          requires:
            - install_dependencies
      - rubocop:
          requires:
            - install_dependencies
      - build_push_docker:
          requires:
            - test
            - security-static-analysis
            - rubocop
      - deploy_staging:
          requires:
            - build_push_docker
          filters:
            branches:
              only: master
